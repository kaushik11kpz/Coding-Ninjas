BST Class

Implement the BST class which includes following functions -
1. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
2. search
Given an element, find if that is present in BST or not. Return true or false.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in in the following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.


/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */
class BSTDeleteReturn {
	BinaryTreeNode<Integer> root;
	boolean deleted;
	
	public BSTDeleteReturn(BinaryTreeNode<Integer> root, boolean deleted)
	{
		this.root=root;
		this.deleted=deleted;
	}
}
public class BinarySearchTree {
    private BinaryTreeNode<Integer> root;
    private int size;
    
	public void insert(int data) {
		//Implement the insert() function
        root = insertHelper(root,data);
        size++;
	}
    private BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> node, int data){
        if(node == null){
            BinaryTreeNode<Integer> newRoot = new BinaryTreeNode<Integer>(data);
            return newRoot;
        }
        if(node.data <= data){
            node.right = insertHelper(node.right,data);
        }
        else{
            node.left = insertHelper(node.left,data);
        }
        return node;
    }
	
	public void remove(int data) {
		//Implement the remove() function
       BSTDeleteReturn output = removeHelper(root,data);
       root = output.root;
        if(output.deleted){
            size--;
        }
	}
    private BSTDeleteReturn removeHelper(BinaryTreeNode<Integer> node,int data){
        if(node == null){
            return new BSTDeleteReturn(null,false);
        }
        if(node.data < data){
            BSTDeleteReturn outputRight = removeHelper(node.right,data);
            node.right = outputRight.root;
            outputRight.root = node;
            return outputRight;
        }
        if(node.data > data){
            BSTDeleteReturn outputLeft = removeHelper(node.left,data);
            node.left = outputLeft.root;
            outputLeft.root = node;
            return outputLeft;
        }
        if(node.left == null && node.right == null){
            return new BSTDeleteReturn(null,true);
        }
        if(node.left != null && node.right == null){
            return new BSTDeleteReturn(node.left,true);
        }
        if(node.right != null && node.left == null){
            return new BSTDeleteReturn(node.right,true);
        }
        
        int  rightSmallest = minimum(root.right);
        root.data = rightSmallest;
        BSTDeleteReturn output = removeHelper(node.right,rightSmallest);
        node.right = output.root;
        return new BSTDeleteReturn(node,true);
    }
    private int minimum(BinaryTreeNode<Integer> root){
        if(root == null){
            return Integer.MAX_VALUE;
        }
        return Math.min(root.data,Math.min(minimum(root.left),minimum(root.right)) );
    }
	
	public void printTree() {
		//Implement the printTree() function
        printTreeHelper(root);
	}
    public void printTreeHelper(BinaryTreeNode<Integer> node){
        if(node == null){
            return;
        }
        System.out.print(node.data + ":");
        if(node.left != null){
            System.out.print("L:" + node.left.data + ",");
        }
        if(node.right != null){
            System.out.print("R:" + node.right.data);
        }
        System.out.println();
        
        printTreeHelper(root.left);
        printTreeHelper(root.right);
    }
	
	public boolean search(int data) {
		return searchHelper(root,data);
	}
    public boolean searchHelper(BinaryTreeNode<Integer> node, int data){
        if(node ==  null){
            return false;
        }
        if(node.data == data){
            return true;
        }
        
        if(node.data > data){
            return searchHelper(node.left,data);
        }
        else{
            return searchHelper(node.right,data);
        }
    }
	

}