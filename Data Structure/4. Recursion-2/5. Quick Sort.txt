Quick Sort - Problem Statement
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] input) {
		int start=0;
        int end = input.length - 1;
        Sort(input,start,end);
	}
    public static void Sort(int[] input, int start, int end){
        if(start >= end){
            return;
        }
        int val = partition(input,start,end);
        Sort(input,start,val-1);
        Sort(input,val+1,end);
    }
    public static int partition(int[] input, int start, int end){
        int count = 0;
        int pivotElement = input[start];
        for(int i=start;i<=end;i++){
            if(input[i] < pivotElement){
                count++;
            }
        }
        int store = input[start+count];
        input[start+count] = pivotElement;
        input[start] = store;
        int i=start;
        int j=end;
        while(i<j){
            if(input[i] < pivotElement){
                i++;
            }
            else if(input[j] >= pivotElement){
                j--;
            }
            else{
                int temp = input[i];
                input[i] = input[j];
                input[j] = temp;
                i++;
                j--;
            }
        }
        return start+count;
    }
	
}