isConnected?

Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {
       
             
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int e = sc.nextInt();
        int matrix[][] = new int[n][n];
        for(int i=0;i<e;i++){
            int v1 = sc.nextInt();
            int v2 = sc.nextInt();
            matrix[v1][v2] = 1;
            matrix[v2][v1] = 1;
        }

        boolean result = isConnected(matrix);
        System.out.print(result);
	}
    
    public static boolean isConnected(int[][] matrix){
        if(matrix.length == 0){
            return true;
        }
        boolean visited[] = new boolean[matrix.length];
        isConnectedHelper(matrix,0,visited);
        for(int i=0;i<visited.length;i++){
            if(visited[i] == false){
                return false;
            }
        }
        return true;
    }
    public static void isConnectedHelper(int[][] matrix, int source, boolean[] visited){
        visited[source] = true;
        for(int j=0;j<matrix[0].length;j++){
            if(matrix[source][j] == 1 && !visited[j]){
                visited[j] = true;
                isConnectedHelper(matrix,j,visited);
            }
        }
        return;
    }

}
