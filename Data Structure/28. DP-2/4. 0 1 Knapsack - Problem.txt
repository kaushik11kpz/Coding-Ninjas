0 1 Knapsack - Problem

A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?
Input Format :
The first line of the input contains an integer value N, which denotes the total number of items.

The second line of input contains the N number of weights separated by a single space.

The third line of input contains the N number of values separated by a single space.

The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal.
Output Format :
Print the maximum value of V that the thief can steal.
Constraints :
1 <= N <= 20
1<= Wi <= 100
1 <= Vi <= 100

Time Limit: 1 sec
Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13
Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26
Sample Output 2 :
51


public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
        int dp[][] = new int[n+1][maxWeight+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<maxWeight+1;j++){
                dp[i][j] = -1;
            }
        }
		return knapsackHelper(weights,values,n,maxWeight,0,dp);
	}
    public static int knapsackHelper(int[] weights, int[] values, int n, int maxWeight, int i, int[][] dp){
        if(i == n){
            return 0;
        }
        int ans;
        if(weights[i] > maxWeight){
            if(dp[i+1][maxWeight] == -1){
                 ans = knapsackHelper(weights,values,n,maxWeight,i+1,dp);
                 dp[i+1][maxWeight] = ans;
            }
            else{
                ans = dp[i+1][maxWeight];
            }
    
        }
        else{
            int ans1,ans2;
            if(dp[i+1][maxWeight-weights[i]] == -1){
                  ans1 = values[i] + knapsackHelper(weights,values,n,maxWeight-weights[i],i+1,dp);
                  dp[i+1][maxWeight-weights[i]] = ans1;
            }
            else{
                ans1 = dp[i+1][maxWeight-weights[i]];
            }
            if(dp[i+1][maxWeight] == -1){
                  ans2 = knapsackHelper(weights,values,n,maxWeight,i+1,dp);
                  dp[i+1][maxWeight] = ans2;
            }
            else{
                ans2 = dp[i+1][maxWeight];
            }
            ans = Math.max(ans1,ans2);
        }
        return ans;
    }

}