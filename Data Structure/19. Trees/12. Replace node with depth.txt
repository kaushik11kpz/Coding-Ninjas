Replace node with depth

In a given Generic Tree, replace each node with its depth value. You need to just update the data of each node, no need to return or print anything.
Input format :

Line 1 : Elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 : (Level wise, each level in new line)
0 
1 1 1 
2 2


public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	public static void replaceWithDepthValue(TreeNode<Integer> root){
	    if(root == null) {
	        return;
	    } 
	    QueueUsingLL<TreeNode<Integer>> q = new QueueUsingLL<TreeNode<Integer>>();
	    TreeNode<Integer> nullNode = new TreeNode<Integer>(Integer.MIN_VALUE); 
	    q.enqueue(root); 
	    q.enqueue(nullNode); 
	    root.data=0;
	    int ans=1;    
	    while(q.size()!=1) {
	        TreeNode<Integer> temp= null; 
	        try { 
	            temp = q.dequeue(); 
	        }
	        catch (QueueEmptyException e){}
	        
	        if(temp==nullNode) { 
	            ans++;
	            q.enqueue(nullNode); 
	          } 
	        for(int i = 0;i<temp.children.size();++i) {
	            temp.children.get(i).data=ans; 
	            q.enqueue(temp.children.get(i)); 
	        }
	    }
	    }
	
	
}
